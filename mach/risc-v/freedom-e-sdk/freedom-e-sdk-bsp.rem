# Use SVN here, as it supports checkout of subfolders, which is the only feature I am missing in git.
sw_package.set_uri("https://github.com/sifive/freedom-e-sdk.git")
sw_package.set_patch("patches/0001-use-crosstool-ng-toolchain.patch 
                      patches/004_remove_nano_specs.patch
                     ")

sw_package.set_arch("risc-v")

# Common
sw_package.set_inc("bsp/include")
sw_package.set_inc("bsp/env")

# Drivers
sw_package.set_inc("bsp/drivers")

# Libwrap
sw_package.set_inc("bsp/libwrap/sys/")

sw_package.set_global_linker_flags ("#{sw_package.pkg_build_dir}/bsp/env/start.o 
                                     #{sw_package.pkg_build_dir}/bsp/env/entry.o 
                                     #{sw_package.pkg_build_dir}/bsp/env/freedom-e300-hifive1/init.o")

sw_package.set_global_linker_flags("-Wl,--wrap=malloc 
                                    -Wl,--wrap=free 
                                    -Wl,--wrap=open 
                                    -Wl,--wrap=lseek 
                                    -Wl,--wrap=read 
                                    -Wl,--wrap=write 
                                    -Wl,--wrap=fstat 
                                    -Wl,--wrap=stat 
                                    -Wl,--wrap=close 
                                    -Wl,--wrap=link 
                                    -Wl,--wrap=unlink 
                                    -Wl,--wrap=execve 
                                    -Wl,--wrap=fork 
                                    -Wl,--wrap=getpid 
                                    -Wl,--wrap=kill 
                                    -Wl,--wrap=wait 
                                    -Wl,--wrap=isatty 
                                    -Wl,--wrap=times 
                                    -Wl,--wrap=sbrk 
                                    -Wl,--wrap=_exit 
                                    -Wl,--wrap=puts 
                                    -Wl,--wrap=_malloc 
                                    -Wl,--wrap=_free 
                                    -Wl,--wrap=_open 
                                    -Wl,--wrap=_lseek 
                                    -Wl,--wrap=_read 
                                    -Wl,--wrap=_write 
                                    -Wl,--wrap=_fstat 
                                    -Wl,--wrap=_stat 
                                    -Wl,--wrap=_close 
                                    -Wl,--wrap=_link 
                                    -Wl,--wrap=_unlink 
                                    -Wl,--wrap=_execve 
                                    -Wl,--wrap=_fork 
                                    -Wl,--wrap=_getpid 
                                    -Wl,--wrap=_kill 
                                    -Wl,--wrap=_wait 
                                    -Wl,--wrap=_isatty 
                                    -Wl,--wrap=_times 
                                    -Wl,--wrap=_sbrk 
                                    -Wl,--wrap=__exit 
                                    -Wl,--wrap=_puts 
                                    -L#{sw_package.pkg_build_dir}/software/hello/
                                    -Wl,--start-group -lwrap -lc -Wl,--end-group")

# hifive1 specific
if global_config.get_mach() == "hifive1"
    sw_package.set_inc("bsp/env/freedom-e300-hifive1")
    sw_package.set_global_linker_flags ("-T #{sw_package.pkg_build_dir}/bsp/env/freedom-e300-hifive1/flash.lds -nostartfiles")
end

# Override default build functions
sw_package.invalidate_build_funcs()

sw_package.override_func :do_compile do
    execute "make -C #{sw_package.get_pkg_work_dir} software PROGRAM=hello [BOARD=freedom-e300-hifive1]"
end

sw_package.override_func :do_compile_clean do
    execute "make -C #{sw_package.get_pkg_work_dir} clean PROGRAM=hello [BOARD=freedom-e300-hifive1]"
end
